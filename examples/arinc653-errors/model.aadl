--
--                               POK header
--
-- The following file is a part of the POK project. Any modification should
-- be made according to the POK licence. You CANNOT use this file or a part
-- of a file for your own project.
--
-- For more information on the POK licence, please see our LICENCE FILE
--
-- Please follow the coding guidelines described in doc/CODING_GUIDELINES
--
--                                      Copyright (c) 2007-2025 POK team

package arinchm

public

with Data_Model;
with POK;
with ARINC653;


data integer
properties
  Data_Model::Data_Representation => integer;
end integer;

virtual bus secure_bus
properties
   Required_Connection_Quality_Of_Service => (SecureDelivery);
   POK::Security_Level => 10;
end secure_bus;

virtual bus medium_bus
properties
   Required_Connection_Quality_Of_Service => (SecureDelivery);
   POK::Security_Level => 10;
end medium_bus;


virtual bus common_bus
properties
   Required_Connection_Quality_Of_Service => (SecureDelivery);
   POK::Security_Level => 10;
end common_bus;


virtual processor partition
properties
   ARINC653::HM_Error_ID_Actions => (
	   	[ErrorIdentifier => 5; Description => "Ignore"; Action => "Ignore";],
   		[ErrorIdentifier => 6; Description => "Warm restart partition"; Action => "Warm restart partition";],
    	[ErrorIdentifier => 7; Description => "Ignore"; Action => "Ignore";],
    	[ErrorIdentifier => 8; Description => "Stop partition"; Action => "Partition_Stop";],
    	[ErrorIdentifier => 9; Description => "Warm restart partition"; Action => "Warm_Restart";],
    	[ErrorIdentifier => 10; Description => "Warm restart partition"; Action => "Warm_Restart";]
      );
   POK::Additional_Features         => (console);
end partition;

virtual processor implementation partition.secure
properties
   Provided_Virtual_Bus_Class => 
               (classifier (arinchm::secure_bus));
   POK::Criticality => 10;
end partition.secure;

virtual processor implementation partition.common
properties
   POK::Criticality => 1;
   Provided_Virtual_Bus_Class => 
               (classifier (arinchm::common_bus));
end partition.common;


subprogram hello_part1
features
   output : out parameter integer;
properties
   source_name => "user_send";
   source_language => (C);
   Source_Text => ("send.c", "send.h");
   Code_Size  => 2 Kbyte;
   Data_Size  => 2 Kbyte;
end hello_part1;

subprogram hello_part2
features
   input : in parameter integer;
properties
   Source_Text => ("receive.c", "receive.h");
   source_language => (C);
   source_name => "user_receive";
   Code_Size  => 2 Kbyte;
   Data_Size  => 2 Kbyte;
end hello_part2;

processor ppc
properties
   POK::Architecture => x86;
   POK::BSP => x86_qemu;
   
end ppc;

processor implementation ppc.impl
subcomponents
   partition_secure : virtual processor partition.secure;
   partition_common : virtual processor partition.common;
properties
   ARINC653::Module_Major_Frame => 1000ms;
   ARINC653::Module_Schedule => (
       	[Partition => reference(partition_common); Duration => 500ms; Periodic_Processing_Start => true;],
       	[Partition => reference(partition_secure); Duration => 500ms; Periodic_Processing_Start => true;]
   );
   
   ARINC653::HM_Error_ID_Levels => (
		[ErrorIdentifier => 1; Description => "Module init error"; ErrorLevel => Module_Level; ErrorCode => Module_Init;],
		[ErrorIdentifier => 2; Description => "Module Scheduling error"; ErrorLevel => Module_Level; ErrorCode => Module_Scheduling;],
		[ErrorIdentifier => 3; Description => "Module config error"; ErrorLevel => Module_Level; ErrorCode => Module_Config;],
		[ErrorIdentifier => 4; Description => "Hardware error"; ErrorLevel => Module_Level; ErrorCode => Hardware_Fault;],
		[ErrorIdentifier => 5; Description => "Partition numeric error"; ErrorLevel => Partition_Level; ErrorCode => Numeric_Error;],
		[ErrorIdentifier => 6; Description => "Partition illegal request error"; ErrorLevel => Partition_Level; ErrorCode => Illegal_Request;],
		[ErrorIdentifier => 7; Description => "Partition init error"; ErrorLevel => Partition_Level; ErrorCode => Partition_Init;],
		[ErrorIdentifier => 8; Description => "Partition scheduling error"; ErrorLevel => Partition_Level; ErrorCode => Partition_Scheduling;],
		[ErrorIdentifier => 9; Description => "Partition handler error"; ErrorLevel => Partition_Level; ErrorCode => Partition_Handler;],
		[ErrorIdentifier => 10; Description => "Partition config error"; ErrorLevel => Partition_Level; ErrorCode => Partition_Config;],
		[ErrorIdentifier => 11; Description => "Process deadline miss"; ErrorLevel => Process_Level; ErrorCode => Deadline_Miss;],
		[ErrorIdentifier => 12; Description => "Process application error"; ErrorLevel => Process_Level; ErrorCode => Application_Error;],
		[ErrorIdentifier => 13; Description => "Process numeric error"; ErrorLevel => Process_Level; ErrorCode => Numeric_Error;],
		[ErrorIdentifier => 14; Description => "Process illegal request"; ErrorLevel => Process_Level; ErrorCode => Illegal_Request;],
		[ErrorIdentifier => 15; Description => "Process power fail"; ErrorLevel => Process_Level; ErrorCode => Power_Fail;],
		[ErrorIdentifier => 16; Description => "Process memory violation"; ErrorLevel => Process_Level; ErrorCode => Memory_Violation;],
		[ErrorIdentifier => 17; Description => "Process stack overflow"; ErrorLevel => Process_Level; ErrorCode => Stack_Overflow;]		
	);
   ARINC653::HM_Error_ID_Actions => (
    	[ErrorIdentifier => 1; Description => "Ignore"; Action => "Ignore";],
    	[ErrorIdentifier => 2; Description => "Stop module"; Action => "Stop";],
    	[ErrorIdentifier => 3; Description => "Reset module"; Action => "Reset";],
    	[ErrorIdentifier => 4; Description => "Reset module"; Action => "Reset";]
      );
end ppc.impl;

thread threads_hm_definition
properties
   ARINC653::HM_Error_ID_Actions => (
    	[ErrorIdentifier => 11; Description => "Restart process"; Action => "Process_Restart";],
    	[ErrorIdentifier => 12; Description => "Ignore"; Action => "Ignore";],
    	[ErrorIdentifier => 13; Description => "Warm restart partition"; Action => "Warm_Restart";],
    	[ErrorIdentifier => 14; Description => "Stop partition"; Action => "Partition_Stop";],
    	[ErrorIdentifier => 15; Description => "Ignore"; Action => "Ignore";],
    	[ErrorIdentifier => 16; Description => "Restart process"; Action => "Process_Restart";],
    	[ErrorIdentifier => 4; Description => "Restart process"; Action => "Process_Restart";],
    	[ErrorIdentifier => 18; Description => "Restart process"; Action => "Process_Restart";]
      );
end threads_hm_definition;

thread receive_ping extends threads_hm_definition
features
   datain : in event data port integer;
properties
   Priority => 1;
   Initialize_Entrypoint => classifier (arinchm::thread_starting);
   Dispatch_Protocol => Periodic;
   Recover_Execution_Time => 10 ms .. 20 ms;
   Period => 500 Ms;
   Code_Size  => 3 Kbyte;
   Data_Size  => 3 Kbyte;
   Stack_Size => 3 KByte;
end receive_ping;

subprogram thread_starting
properties
   source_name => "user_thread_starting";
   source_language => (C);
   Source_Text => ("threadstart.c", "threadstart.h");
   Code_Size  => 3 Kbyte;
   Data_Size  => 3 Kbyte;
   Stack_Size => 3 KByte;
end thread_starting;

thread send_ping extends threads_hm_definition
features
   dataout : out event data port integer {Compute_Deadline => 40 ms;};
properties
   Priority => 1;
   Dispatch_Protocol => Periodic;
   Period => 1000 Ms;
   Recover_Execution_Time => 10 ms .. 20 ms;
   Code_Size  => 3 Kbyte;
   Data_Size  => 3 Kbyte;
   Stack_Size => 3 KByte;
end send_ping;

thread implementation send_ping.impl
calls 
   call1 : { pspg : subprogram hello_part1;};
connections
   cnx: parameter pspg.output -> dataout;
end send_ping.impl;

thread implementation receive_ping.impl
calls 
   call1 : { pspg : subprogram hello_part2;};
connections
   cnx: parameter datain -> pspg.input;
end receive_ping.impl;

process receive_ping_process
features
   pdatain : in event data port integer
            {Allowed_Connection_Binding_Class =>
                  (classifier (arinchm::medium_bus)); 
             Compute_Deadline => 30 ms;};
end receive_ping_process;

process send_ping_process
features
   pdataout : out event data port integer
      {Overflow_Handling_Protocol => DropOldest; 
		 Allowed_Connection_Binding_Class => (classifier (arinchm::secure_bus));
       Queue_Size => 2; 
       };
end send_ping_process;

process implementation receive_ping_process.impl
subcomponents
   thr : thread receive_ping.impl;
connections
   cnx: port pdatain -> thr.datain; 
end receive_ping_process.impl;

process implementation send_ping_process.impl
subcomponents
   thr : thread send_ping.impl;
connections
   cnx: port thr.dataout -> pdataout;
end send_ping_process.impl;

system node
end node;

memory partitionmemory
properties
   Memory_Size => 800000 Bytes;
end partitionmemory;

memory mainmemory
end mainmemory;

memory implementation mainmemory.impl
subcomponents
   part1: memory partitionmemory ;
   part2: memory partitionmemory ;
end mainmemory.impl;

bus separation_bus
end separation_bus;

bus implementation separation_bus.i
subcomponents
   common : virtual bus common_bus;
   secure : virtual bus secure_bus;
   medium : virtual bus medium_bus;
end separation_bus.i;


system implementation node.impl
subcomponents
   cpu : processor ppc.impl;
   pr1 : process send_ping_process.impl;
   pr2 : process receive_ping_process.impl;
   mem : memory mainmemory.impl;
   eth : bus separation_bus.i;
connections
   cnx: port pr1.pdataout -> pr2.pdatain
      {Allowed_Connection_Binding_Class => (classifier (arinchm::secure_bus));};
properties
   actual_processor_binding => 
      (reference (cpu.partition_secure)) applies to pr2;
   actual_processor_binding => 
      (reference (cpu.partition_common)) applies to pr1;
   actual_memory_binding =>
      (reference (mem.part1)) applies to pr1;
   actual_memory_binding =>
      (reference (mem.part2)) applies to pr2;
end node.impl;

end arinchm;
