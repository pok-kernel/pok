--
--                               POK header
--
-- The following file is a part of the POK project. Any modification should
-- be made according to the POK licence. You CANNOT use this file or a part
-- of a file for your own project.
--
-- For more information on the POK licence, please see our LICENCE FILE
--
-- Please follow the coding guidelines described in doc/CODING_GUIDELINES
--
--                                      Copyright (c) 2007-2025 POK team

package arinc653_testevents

public

with Data_Model;
with POK;
with ARINC653;

data myint
properties
   Data_Model::Data_Representation => integer;
end myint;

virtual processor partition
properties
   POK::Additional_Features => (console, libc_stdio);
end partition;

virtual processor implementation partition.impl
end partition.impl;

processor ppc
end ppc;

processor implementation ppc.impl
subcomponents
   part1 : virtual processor partition.impl;
properties
   POK::Architecture => x86;
   POK::BSP => x86_qemu;
   ARINC653::Module_Major_Frame => 500 ms;
   ARINC653::Module_Schedule => (
       	[Partition => reference(part1); Duration => 500ms; Periodic_Processing_Start => true;]
   );
end ppc.impl;

process myprocess1
end myprocess1;

process implementation myprocess1.impl
subcomponents
   thr1 : thread mythread1.impl;
   thr2 : thread mythread2.impl;
connections
   cnx: port thr1.output -> thr2.input;
end myprocess1.impl;

thread mythread1
features
   output : out event port;
properties
   Priority => 2;
end mythread1;

thread mythread2
features
   input : in event port {Input_Time=>([Time => Start; Offset => 0 ns .. 0 ns;]);};
properties
   Priority => 1;
   Compute_Entrypoint => classifier (arinc653_testevents::spg_receive_event);
end mythread2;

thread implementation mythread1.impl
properties
   dispatch_protocol => periodic;
   period            => 1000 ms;
   Compute_Entrypoint => classifier (arinc653_testevents::spg_send_event);
end mythread1.impl;

thread implementation mythread2.impl
properties
   dispatch_protocol => periodic;
   period            => 1000 ms;
end mythread2.impl;

subprogram spg_receive_event
properties
   Source_Text => ("receive.c");
   source_language => (C);
   source_name => "user_receive";
end spg_receive_event;

subprogram spg_send_event
properties
   Source_Text => ("send.c");
   source_language => (C);
   source_name => "user_send";
end spg_send_event;

memory partitionmemory
properties
   Memory_Size => 300000 Bytes;
end partitionmemory;

memory mainmemory
end mainmemory;

memory implementation mainmemory.impl
subcomponents
   part1: memory partitionmemory ;
end mainmemory.impl;


system node
end node;

system implementation node.impl
subcomponents
   cpu   : processor ppc.impl;
   part1 : process myprocess1.impl;
   mem : memory mainmemory.impl;
properties
   Actual_Processor_Binding => (reference (cpu.part1)) applies to part1;
   actual_memory_binding =>
      (reference (mem.part1)) applies to part1;
end node.impl;

end arinc653_testevents;
