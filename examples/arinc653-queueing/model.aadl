--
--                               POK header
--
-- The following file is a part of the POK project. Any modification should
-- be made according to the POK licence. You CANNOT use this file or a part
-- of a file for your own project.
--
-- For more information on the POK licence, please see our LICENCE FILE
--
-- Please follow the coding guidelines described in doc/CODING_GUIDELINES
--
--                                      Copyright (c) 2007-2025 POK team

package pingpong

public

with Data_Model;
with POK;
with ARINC653;

data integer
properties
  Data_Model::Data_Representation => integer;
end integer;

virtual bus secure_bus
properties
   Required_Connection_Quality_Of_Service => (SecureDelivery);
end secure_bus;

virtual bus medium_bus
properties
   Required_Connection_Quality_Of_Service => (SecureDelivery);
end medium_bus;


virtual bus common_bus
properties
   Required_Connection_Quality_Of_Service => (SecureDelivery);
end common_bus;

virtual processor partition
	properties
	ARINC653::HM_Error_ID_Actions => (
    	[ErrorIdentifier => 1; Description => "Warm partition restart"; Action => "Warm_Restart";]
      );
   POK::Additional_Features => (libc_stdio, console);
end partition;

virtual processor implementation partition.secure
properties
   Provided_Virtual_Bus_Class => 
               (classifier (pingpong::secure_bus));
   POK::Criticality => 10;
end partition.secure;

subprogram hello_part1
features
   output : out parameter integer;
properties
   source_name => "user_send";
   source_language => (C);
   source_text => ("send.c");
end hello_part1;

subprogram hello_part2
features
   input : in parameter integer;
properties
   source_text => ("receive.c");
   source_language => (C);
   source_name => "user_receive";
end hello_part2;

virtual processor implementation partition.common
properties
   Provided_Virtual_Bus_Class => 
               (classifier (pingpong::common_bus));
   POK::Criticality => 1;
end partition.common;

processor ppc
properties
   POK::Architecture => x86;
   POK::BSP => x86_qemu;
end ppc;

processor implementation ppc.impl
subcomponents
   partition_secure : virtual processor partition.secure;
   partition_common : virtual processor partition.common;
properties
   ARINC653::Module_Major_Frame => 1000ms;
   Period => 500 ms applies to partition_secure, partition_common;
   ARINC653::Module_Schedule => (
       	[Partition => reference(partition_secure); Duration => 500ms; Periodic_Processing_Start => true;],
       	[Partition => reference(partition_common); Duration => 500ms; Periodic_Processing_Start => true;]
      );
   ARINC653::HM_Error_ID_Levels => (
		[ErrorIdentifier => 1; Description => "Partition init error"; ErrorLevel => Partition_Level; ErrorCode => Partition_Init;],
		[ErrorIdentifier => 2; Description => "Numeric error"; ErrorLevel => Process_Level; ErrorCode => Numeric_Error;]
	);
	scheduling_protocol => (POSIX_1003_HIGHEST_PRIORITY_FIRST_PROTOCOL) applies to partition_secure, partition_common; 
end ppc.impl;

thread receive_ping
features
   tdatain : in event data port integer
                     {ARINC653::Timeout => 10 ms;};
properties
   Priority => 1;
   Dispatch_Protocol => Periodic;
   Compute_Execution_Time => 0 ms .. 1 ms;
   Period => 1000 Ms;
   ARINC653::HM_Error_ID_Actions => (
   	[ErrorIdentifier => 2; Description => "Warm partition restart"; Action => "Warm_Restart";]
   );
   Data_Size => 400000 bytes;
   Stack_Size => 400000 bytes;
   Code_Size => 40 bytes;
end receive_ping;

thread send_ping
features
   tdataout : out event data port integer
                     {ARINC653::Timeout => 10 ms;};
properties
   Priority => 1;
   Dispatch_Protocol => Periodic;
   Period => 1000 Ms;
   Data_Size => 40 bytes;
   Stack_Size => 40 bytes;
   Code_Size => 40 bytes;
   Compute_Execution_Time => 0 ms .. 1 ms;
   ARINC653::HM_Error_ID_Actions => (
   	[ErrorIdentifier => 2; Description => "Warm partition restart"; Action => "Warm_Restart";]
   );
end send_ping;

thread implementation send_ping.impl
calls 
   call1 : { pspg : subprogram hello_part1;};
connections
   cnx: parameter pspg.output -> tdataout;
end send_ping.impl;

thread implementation receive_ping.impl
calls 
   call1 : { pspg : subprogram hello_part2;};
connections
   cnx: parameter tdatain -> pspg.input;
end receive_ping.impl;

process receive_ping_process
features
   pdatain : in event data port integer {Allowed_Connection_Binding_Class => (classifier (pingpong::medium_bus)); Queue_Size => 2;}; 
properties
   Code_Size => 10 KByte;
   Data_Size => 15 KByte;
end receive_ping_process;

process send_ping_process
features
   pdataout : out event data port integer
      {Overflow_Handling_Protocol => DropOldest; 
		 Allowed_Connection_Binding_Class => (classifier (pingpong::secure_bus));
       Queue_Size => 2; 
       ARINC653::Timeout => 10 ms;
       Queue_Processing_Protocol => Fifo;
       };
end send_ping_process;

process implementation receive_ping_process.impl
subcomponents
   thr : thread receive_ping.impl;
connections
   cnx: port pdatain -> thr.tdatain; 
end receive_ping_process.impl;

process implementation send_ping_process.impl
subcomponents
   thr : thread send_ping.impl;
connections
   cnx: port thr.tdataout -> pdataout;
end send_ping_process.impl;

system node
end node;

memory partitionmemory
properties
   Memory_Size => 80000 Bytes;
   ARINC653::Memory_Kind => (Memory_Code);
end partitionmemory;

memory mainmemory
end mainmemory;

memory implementation mainmemory.impl
subcomponents
   part1: memory partitionmemory 
               {ARINC653::Memory_Kind => (Memory_Code);};
   part2: memory partitionmemory
               {ARINC653::Memory_Kind => (Memory_Code);};
end mainmemory.impl;



system implementation node.impl
subcomponents
   cpu : processor ppc.impl;
   pr1 : process send_ping_process.impl;
   pr2 : process receive_ping_process.impl;
   mem : memory mainmemory.impl;
connections
   cnx: port pr1.pdataout -> pr2.pdatain
      {Allowed_Connection_Binding_Class => (classifier (pingpong::secure_bus));};
properties
   Scheduling_Protocol => (Arinc653) applies to cpu;
   actual_processor_binding => 
      (reference (cpu.partition_secure)) applies to pr2;
   actual_processor_binding => 
      (reference (cpu.partition_common)) applies to pr1;
   actual_memory_binding =>
      (reference (mem.part1)) applies to pr1;
   actual_memory_binding =>
      (reference (mem.part2)) applies to pr2;
end node.impl;

end pingpong;
